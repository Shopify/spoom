# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `saturn` gem.
# Please instead update this file by running `bin/tapioca gem saturn`.


# source://saturn//../../saturn/lib/saturn/location.rb#3
module Saturn; end

class Saturn::AttrAccessorDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

class Saturn::AttrReaderDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

class Saturn::AttrWriterDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

class Saturn::ClassDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

class Saturn::ClassVariableDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

# source://saturn//../../saturn/lib/saturn/comment.rb#4
class Saturn::Comment
  # @return [Comment] a new instance of Comment
  #
  # source://saturn//../../saturn/lib/saturn/comment.rb#12
  def initialize(string:, location:); end

  # source://saturn//../../saturn/lib/saturn/comment.rb#9
  def location; end

  # source://saturn//../../saturn/lib/saturn/comment.rb#6
  def string; end
end

class Saturn::ConstantDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

class Saturn::Declaration
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def definitions; end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def name; end

  class << self
    private

    # source://saturn//../../saturn/lib/saturn.rb#7
    def new(*_arg0); end
  end
end

class Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def comments; end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def location; end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def name; end

  class << self
    private

    # source://saturn//../../saturn/lib/saturn.rb#7
    def new(*_arg0); end
  end
end

class Saturn::Document
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def definitions; end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def uri; end

  class << self
    private

    # source://saturn//../../saturn/lib/saturn.rb#7
    def new(*_arg0); end
  end
end

# source://saturn//../../saturn/lib/saturn.rb#14
class Saturn::Error < ::StandardError; end

class Saturn::GlobalVariableDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

# The global graph representing all declarations and their relationships for the workspace
#
# Note: this class is partially defined in C to integrate with the Rust backend
#
# source://saturn//../../saturn/lib/saturn/graph.rb#7
class Saturn::Graph
  # @return [Graph] a new instance of Graph
  #
  # source://saturn//../../saturn/lib/saturn/graph.rb#9
  def initialize(workspace_path: T.unsafe(nil)); end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def [](_arg0); end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def declarations; end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def documents; end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def index_all(_arg0); end

  # Index all files and dependencies of the workspace that exists in `@workspace_path`
  #
  # source://saturn//../../saturn/lib/saturn/graph.rb#15
  def index_workspace; end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def set_configuration(_arg0); end

  # source://saturn//../../saturn/lib/saturn.rb#7
  def unresolved_references; end

  private

  # Gathers the paths we have to index for all workspace dependencies
  #
  # source://saturn//../../saturn/lib/saturn/graph.rb#24
  def workspace_dependency_paths; end
end

class Saturn::InstanceVariableDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

# source://saturn//../../saturn/lib/saturn/location.rb#4
class Saturn::Location
  include ::Comparable

  # @return [Location] a new instance of Location
  #
  # source://saturn//../../saturn/lib/saturn/location.rb#14
  def initialize(uri:, start_line:, end_line:, start_column:, end_column:); end

  # source://saturn//../../saturn/lib/saturn/location.rb#31
  def <=>(other); end

  # source://saturn//../../saturn/lib/saturn/location.rb#11
  def end_column; end

  # source://saturn//../../saturn/lib/saturn/location.rb#11
  def end_line; end

  # @raise [Saturn::Error]
  #
  # source://saturn//../../saturn/lib/saturn/location.rb#23
  def path; end

  # source://saturn//../../saturn/lib/saturn/location.rb#11
  def start_column; end

  # source://saturn//../../saturn/lib/saturn/location.rb#11
  def start_line; end

  # source://saturn//../../saturn/lib/saturn/location.rb#40
  def to_s; end

  # source://saturn//../../saturn/lib/saturn/location.rb#8
  def uri; end
end

class Saturn::MethodDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

class Saturn::ModuleDefinition < ::Saturn::Definition
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(_arg0, _arg1); end
end

class Saturn::UnresolvedConstantReference < ::Saturn::UnresolvedReference; end
class Saturn::UnresolvedMethodReference < ::Saturn::UnresolvedReference; end

# source://saturn//../../saturn/lib/saturn/unresolved_reference.rb#4
class Saturn::UnresolvedReference
  # @return [UnresolvedReference] a new instance of UnresolvedReference
  #
  # source://saturn//../../saturn/lib/saturn.rb#7
  def initialize(name, location); end

  # source://saturn//../../saturn/lib/saturn/unresolved_reference.rb#9
  def location; end

  # source://saturn//../../saturn/lib/saturn/unresolved_reference.rb#6
  def name; end
end

# source://saturn//../../saturn/lib/saturn/version.rb#4
Saturn::VERSION = T.let(T.unsafe(nil), String)
